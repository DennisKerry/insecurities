/* P4 Security Implementations for Common Network Attacks
 * This file contains multiple P4 code snippets for different security scenarios
 */

//---------------------------------------------------
// 1. DDoS PROTECTION IMPLEMENTATION
//---------------------------------------------------

#include <core.p4>
#include <v1model.p4>

// Header definitions
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

struct metadata_t {
    bit<32> packet_count;
    bit<32> byte_count;
    bit<1>  is_attack;
}

struct headers_t {
    ethernet_t ethernet;
    ipv4_t     ipv4;
    tcp_t      tcp;
}

// Parser implementation
parser MyParser(packet_in packet,
                out headers_t hdr,
                inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition select(hdr.ipv4.protocol) {
            6: parse_tcp;
            default: accept;
        }
    }

    state parse_tcp {
        packet.extract(hdr.tcp);
        transition accept;
    }
}

// DDoS detection and mitigation control
control DDoSDefense(inout headers_t hdr,
                   inout metadata_t meta,
                   inout standard_metadata_t standard_metadata) {
    // Simple rate limiting counters per source IP
    register<bit<32>>(65536) ip_packet_counter;
    register<bit<32>>(65536) ip_last_seen;
    
    // Bloom filter for SYN flood detection
    register<bit<8>>(16384) syn_bloom_filter;
    
    // Threshold constants
    const bit<32> PACKET_THRESHOLD = 1000;
    const bit<32> TIME_WINDOW = 1000000; // Microseconds
    
    action compute_hash_1() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {hdr.ipv4.srcAddr}, (bit<32>)65536);
    }
    
    action compute_bloom_hash() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort}, 
             (bit<32>)16384);
    }
    
    action drop() {
        mark_to_drop(standard_metadata);
    }
    
    apply {
        if (hdr.ipv4.isValid()) {
            // Compute hash for the source IP
            compute_hash_1();
            
            // Update packet counter for source IP
            bit<32> packet_count;
            bit<32> last_seen;
            bit<32> current_time = standard_metadata.ingress_global_timestamp;
            
            ip_packet_counter.read(packet_count, meta.packet_count);
            ip_last_seen.read(last_seen, meta.packet_count);
            
            // Reset counter if time window has passed
            if (current_time - last_seen > TIME_WINDOW) {
                packet_count = 0;
            }
            
            // Increment packet counter
            packet_count = packet_count + 1;
            
            // Check if packet rate exceeds threshold
            if (packet_count > PACKET_THRESHOLD) {
                meta.is_attack = 1;
                drop();
            } else {
                // Update counters
                ip_packet_counter.write(meta.packet_count, packet_count);
                ip_last_seen.write(meta.packet_count, current_time);
            }
            
            // Special handling for SYN flood (TCP SYN flag is set but not ACK)
            if (hdr.tcp.isValid() && (hdr.tcp.flags & 0x02 != 0) && (hdr.tcp.flags & 0x10 == 0)) {
                compute_bloom_hash();
                
                bit<8> bloom_count;
                syn_bloom_filter.read(bloom_count, meta.packet_count);
                
                // Increment counter in bloom filter
                bloom_count = bloom_count + 1;
                
                // If too many SYNs hitting this bloom filter entry, drop
                if (bloom_count > 3) {
                    drop();
                }
                
                syn_bloom_filter.write(meta.packet_count, bloom_count);
            }
        }
    }
}

//---------------------------------------------------
// 2. MAN-IN-THE-MIDDLE DETECTION 
//---------------------------------------------------

control MITMDefense(inout headers_t hdr,
                   inout metadata_t meta,
                   inout standard_metadata_t standard_metadata) {
    
    // Table to track valid MAC-IP bindings
    table mac_ip_map {
        key = {
            hdr.ethernet.srcAddr: exact;
            hdr.ipv4.srcAddr: exact;
        }
        actions = {
            NoAction;
            drop;
        }
        default_action = drop();
        size = 1024;
    }
    
    // TTL monitoring for MITM detection
    action check_ttl() {
        // Many MITM attacks decrease TTL; flag suspiciously low TTLs
        if (hdr.ipv4.ttl < 5) {
            meta.is_attack = 1;
            drop();
        }
    }
    
    apply {
        if (hdr.ipv4.isValid()) {
            // Check MAC-IP binding
            mac_ip_map.apply();
            
            // Check TTL value
            check_ttl();
        }
    }
}

//---------------------------------------------------
// 3. TCP/IP SPOOFING PROTECTION
//---------------------------------------------------

control SpoofingDefense(inout headers_t hdr,
                       inout metadata_t meta,
                       inout standard_metadata_t standard_metadata) {
    
    // Ingress port to valid source subnet mappings
    table port_to_subnet {
        key = {
            standard_metadata.ingress_port: exact;
            hdr.ipv4.srcAddr: lpm;
        }
        actions = {
            NoAction;
            drop;
        }
        default_action = drop();
        size = 1024;
    }
    
    // Detect impossible source addresses
    action check_impossible_source() {
        // Check for private IPs coming from external ports
        if ((hdr.ipv4.srcAddr & 0xFF000000 == 0x0A000000 || // 10.0.0.0/8
             hdr.ipv4.srcAddr & 0xFFF00000 == 0xAC100000 || // 172.16.0.0/12
             hdr.ipv4.srcAddr & 0xFFFF0000 == 0xC0A80000)   // 192.168.0.0/16
            && standard_metadata.ingress_port == 1) { // Assuming port 1 is external
            drop();
        }
        
        // Block bogon addresses
        if (hdr.ipv4.srcAddr & 0xFF000000 == 0x00000000 || // 0.0.0.0/8
            hdr.ipv4.srcAddr & 0xFF000000 == 0x7F000000) { // 127.0.0.0/8
            drop();
        }
    }
    
    apply {
        if (hdr.ipv4.isValid()) {
            // Verify source IP matches expected subnet for ingress port
            port_to_subnet.apply();
            
            // Check for impossible source addresses
            check_impossible_source();
        }
    }
}

//---------------------------------------------------
// 4. ARP POISONING PROTECTION
//---------------------------------------------------

header arp_t {
    bit<16> hwType;
    bit<16> protoType;
    bit<8>  hwAddrLen;
    bit<8>  protoAddrLen;
    bit<16> opcode;
    bit<48> srcMAC;
    bit<32> srcIP;
    bit<48> dstMAC;
    bit<32> dstIP;
}

struct arp_headers_t {
    ethernet_t ethernet;
    arp_t      arp;
}

control ARPDefense(inout arp_headers_t hdr,
                  inout metadata_t meta,
                  inout standard_metadata_t standard_metadata) {
    
    // Table of valid MAC-IP pairs
    table arp_inspection {
        key = {
            hdr.arp.srcMAC: exact;
            hdr.arp.srcIP: exact;
        }
        actions = {
            NoAction;
            drop;
        }
        default_action = NoAction();
        size = 1024;
    }
    
    // Limit ARP rate per host
    register<bit<32>>(1024) arp_packet_counter;
    register<bit<32>>(1024) arp_last_seen;
    
    action compute_arp_hash() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {hdr.arp.srcMAC}, (bit<32>)1024);
    }
    
    apply {
        if (hdr.arp.isValid() && hdr.arp.opcode == 1) { // ARP request
            // Check if MAC-IP pair is valid
            arp_inspection.apply();
            
            // Implement rate limiting for ARP
            compute_arp_hash();
            
            bit<32> packet_count;
            bit<32> last_seen;
            bit<32> current_time = standard_metadata.ingress_global_timestamp;
            
            arp_packet_counter.read(packet_count, meta.packet_count);
            arp_last_seen.read(last_seen, meta.packet_count);
            
            // Reset counter if time window has passed
            if (current_time - last_seen > 10000000) { // 10 seconds
                packet_count = 0;
            }
            
            // Increment packet counter
            packet_count = packet_count + 1;
            
            // Check if packet rate exceeds threshold
            if (packet_count > 50) { // Max 50 ARPs in 10 seconds
                drop();
            } else {
                // Update counters
                arp_packet_counter.write(meta.packet_count, packet_count);
                arp_last_seen.write(meta.packet_count, current_time);
            }
        }
    }
}

//---------------------------------------------------
// 5. PACKET INJECTION PROTECTION
//---------------------------------------------------

control PacketInjectionDefense(inout headers_t hdr,
                              inout metadata_t meta,
                              inout standard_metadata_t standard_metadata) {
    
    // TCP sequence tracking registers
    register<bit<32>>(65536) expected_seq;
    register<bit<1>>(65536) connection_established;
    
    action compute_conn_hash() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort}, 
             (bit<32>)65536);
    }
    
    apply {
        if (hdr.tcp.isValid()) {
            compute_conn_hash();
            
            bit<32> expected;
            bit<1> established;
            
            expected_seq.read(expected, meta.packet_count);
            connection_established.read(established, meta.packet_count);
            
            // Handle SYN packets (start of connection)
            if (hdr.tcp.flags & 0x02 != 0) {
                // Store initial sequence number + 1
                expected_seq.write(meta.packet_count, hdr.tcp.seqNo + 1);
                connection_established.write(meta.packet_count, 0);
            }
            // Handle ACK in three-way handshake
            else if (hdr.tcp.flags & 0x10 != 0 && established == 0) {
                connection_established.write(meta.packet_count, 1);
            }
            // For established connections, check sequence numbers
            else if (established == 1) {
                if (hdr.tcp.seqNo != expected) {
                    // Detected potential injection - sequence mismatch
                    drop();
                } else {
                    // Update expected sequence number based on payload length
                    // This is simplified - real implementation would need to calculate payload length
                    bit<32> next_seq = hdr.tcp.seqNo + 1;
                    expected_seq.write(meta.packet_count, next_seq);
                }
            }
        }
    }
}

//---------------------------------------------------
// 6. CUSTOM DEFENSE MODEL AGAINST SLOW-RATE ATTACKS
//---------------------------------------------------

control SlowRateDefense(inout headers_t hdr,
                       inout metadata_t meta,
                       inout standard_metadata_t standard_metadata) {
    
    // Track TCP connection states
    register<bit<32>>(65536) connection_start_time;
    register<bit<32>>(65536) packet_count_conn;
    register<bit<32>>(65536) last_packet_time;
    
    action compute_slow_attack_hash() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort}, 
             (bit<32>)65536);
    }
    
    apply {
        if (hdr.tcp.isValid()) {
            compute_slow_attack_hash();
            
            bit<32> start_time;
            bit<32> conn_packet_count;
            bit<32> last_time;
            bit<32> current_time = standard_metadata.ingress_global_timestamp;
            
            connection_start_time.read(start_time, meta.packet_count);
            packet_count_conn.read(conn_packet_count, meta.packet_count);
            last_packet_time.read(last_time, meta.packet_count);
            
            // For new connections, initialize
            if (conn_packet_count == 0 || current_time - last_time > 30000000) { // 30 seconds timeout
                connection_start
connection_start_time.write(meta.packet_count, current_time);
                packet_count_conn.write(meta.packet_count, 1);
                last_packet_time.write(meta.packet_count, current_time);
            } else {
                // Update connection stats
                conn_packet_count = conn_packet_count + 1;
                packet_count_conn.write(meta.packet_count, conn_packet_count);
                last_packet_time.write(meta.packet_count, current_time);
                
                // Check for slow-rate attack patterns
                if (current_time - start_time > 10000000) { // 10 seconds
                    // Check packet rate
                    bit<32> packet_rate = (conn_packet_count * 1000000) / (current_time - start_time);
                    
                    // Check if it's a slow connection holding resources
                    if (packet_rate < 5 && conn_packet_count > 10 && 
                        (hdr.tcp.flags & 0x01 == 0)) { // Not a FIN packet
                        
                        // Check time between packets
                        bit<32> inter_packet_time = current_time - last_time;
                        
                        // If packets are coming just slow enough to keep connection alive
                        if (inter_packet_time > 5000000 && inter_packet_time < 30000000) {
                            // Likely a slow-rate attack
                            drop();
                        }
                    }
                }
            }
        }
    }
}

//---------------------------------------------------
// 7. COMPREHENSIVE INGRESS PIPELINE
//---------------------------------------------------

control MyIngress(inout headers_t hdr,
                  inout metadata_t meta,
                  inout standard_metadata_t standard_metadata) {
    
    DDoSDefense() ddos_defense;
    MITMDefense() mitm_defense;
    SpoofingDefense() spoofing_defense;
    PacketInjectionDefense() injection_defense;
    SlowRateDefense() slow_defense;
    
    apply {
        // Apply security controls in sequence
        meta.is_attack = 0;
        
        // 1. Check for IP spoofing first
        spoofing_defense.apply(hdr, meta, standard_metadata);
        
        // 2. Apply DDoS protection
        if (meta.is_attack == 0) {
            ddos_defense.apply(hdr, meta, standard_metadata);
        }
        
        // 3. Check for MITM attacks
        if (meta.is_attack == 0) {
            mitm_defense.apply(hdr, meta, standard_metadata);
        }
        
        // 4. Verify TCP sequence numbers
        if (meta.is_attack == 0 && hdr.tcp.isValid()) {
            injection_defense.apply(hdr, meta, standard_metadata);
        }
        
        // 5. Check for slow-rate attacks
        if (meta.is_attack == 0 && hdr.tcp.isValid()) {
            slow_defense.apply(hdr, meta, standard_metadata);
        }
        
        // Normal packet processing can continue here
    }
}

//---------------------------------------------------
// 8. EGRESS PIPELINE WITH RATE LIMITING
//---------------------------------------------------

control MyEgress(inout headers_t hdr,
                 inout metadata_t meta,
                 inout standard_metadata_t standard_metadata) {
    
    // Token bucket rate limiter
    register<bit<32>>(1024) token_bucket;
    register<bit<32>>(1024) last_token_update;
    
    // Rate limit parameters
    const bit<32> MAX_TOKENS = 1000;
    const bit<32> TOKEN_RATE = 100; // Tokens per microsecond
    
    action compute_queue_hash() {
        hash(meta.packet_count, HashAlgorithm.crc16, (bit<16>)0, 
             {standard_metadata.egress_port}, (bit<32>)1024);
    }
    
    apply {
        compute_queue_hash();
        
        bit<32> tokens;
        bit<32> last_update;
        bit<32> current_time = standard_metadata.egress_global_timestamp;
        
        token_bucket.read(tokens, meta.packet_count);
        last_token_update.read(last_update, meta.packet_count);
        
        // Add tokens based on elapsed time
        bit<32> time_diff = current_time - last_update;
        bit<32> new_tokens = time_diff * TOKEN_RATE;
        
        // Update token bucket
        if (tokens + new_tokens > MAX_TOKENS) {
            tokens = MAX_TOKENS;
        } else {
            tokens = tokens + new_tokens;
        }
        
        // Check if we have enough tokens for this packet
        if (tokens >= standard_metadata.packet_length) {
            tokens = tokens - standard_metadata.packet_length;
        } else {
            mark_to_drop(standard_metadata);
        }
        
        // Update registers
        token_bucket.write(meta.packet_count, tokens);
        last_token_update.write(meta.packet_count, current_time);
    }
}

//---------------------------------------------------
// 9. CHECKSUMS AND DEPARSER
//---------------------------------------------------

control MyVerifyChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply {
        verify_checksum(
            hdr.ipv4.isValid(),
            { hdr.ipv4.version,
              hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}

control MyComputeChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply {
        update_checksum(
            hdr.ipv4.isValid(),
            { hdr.ipv4.version,
              hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}

control MyDeparser(packet_out packet, in headers_t hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
        packet.emit(hdr.tcp);
    }
}

//---------------------------------------------------
// 10. MAIN SWITCH
//---------------------------------------------------

V1Switch(
    MyParser(),
    MyVerifyChecksum(),
    MyIngress(),
    MyEgress(),
    MyComputeChecksum(),
    MyDeparser()
) main;