#include <core.p4>
#include <v1model.p4>

//-----------------------------------------------------------------------------
// 1. Header definitions
//----------------------------------------------------------------------------- 
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

//-----------------------------------------------------------------------------
// 2. Parsed-packet and metadata structs
//----------------------------------------------------------------------------- 
struct headers_t {
    ethernet_t ethernet;
    ipv4_t     ipv4;
}

struct metadata_t {
    bit<1> is_ddos;     // flag for DDoS detection
    bit<1> is_spoofed;  // flag for IP spoofing
    bit<1> is_scan;     // flag for port scanning detection
}

//-----------------------------------------------------------------------------
// 3. Parser (must include std_meta)
//----------------------------------------------------------------------------- 
parser MyParser(packet_in            pkt,
                out headers_t        hdr,
                inout metadata_t     meta,
                inout standard_metadata_t std_meta) {
    state start {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
        transition accept;
    }
}

//-----------------------------------------------------------------------------
// 4. Verify checksum (v1model signature uses 2 args)
//----------------------------------------------------------------------------- 
control MyVerifyChecksum(inout headers_t    hdr,
                         inout metadata_t  meta) {
    apply { }
}

//-----------------------------------------------------------------------------
// 5. Ingress control with security logic
//----------------------------------------------------------------------------- 
control MyIngress(inout headers_t           hdr,
                  inout metadata_t         meta,
                  inout standard_metadata_t std_meta) {

    action drop() {
        mark_to_drop(std_meta);
    }

    table ingress_filter {
        key = { hdr.ipv4.srcAddr : exact; }
        actions = { drop; NoAction; }
        size = 1024;
        default_action = NoAction();
    }

    table acl_filter {
        key = { hdr.ipv4.dstAddr : exact; }
        actions = { drop; NoAction; }
        size = 1024;
        default_action = NoAction();
    }

    apply {
        if (hdr.ipv4.isValid()) {
            // üîç NEW: Mark potential DDoS packets (basic logic: all TCP packets)
            if (hdr.ipv4.protocol == 6) {
                meta.is_ddos = 1;
            }

            // üö´ DDoS check: drop if flagged
            if (std_meta.ingress_port == 1 && meta.is_ddos == 1) {
                drop(); return;
            }

            // Spoof prevention
            ingress_filter.apply();

            // Port-scan detection
            if (meta.is_scan == 1) {
                drop(); return;
            }

            // ACL enforcement
            acl_filter.apply();
        }
    }
}

//-----------------------------------------------------------------------------
// 6. Egress control
//----------------------------------------------------------------------------- 
control MyEgress(inout headers_t           hdr,
                 inout metadata_t         meta,
                 inout standard_metadata_t std_meta) {
    apply { }
}

//-----------------------------------------------------------------------------
// 7. Compute checksum (v1model signature uses 2 args)
//----------------------------------------------------------------------------- 
control MyComputeChecksum(inout headers_t   hdr,
                          inout metadata_t meta) {
    apply { }
}

//-----------------------------------------------------------------------------
// 8. Deparser
//----------------------------------------------------------------------------- 
control MyDeparser(packet_out           pkt,
                   in headers_t         hdr) {
    apply {
        pkt.emit(hdr.ethernet);
        pkt.emit(hdr.ipv4);
    }
}

//-----------------------------------------------------------------------------
// 9. Pipeline instantiation: must match v1model package
//----------------------------------------------------------------------------- 
V1Switch(
    MyParser(),
    MyVerifyChecksum(),
    MyIngress(),
    MyEgress(),
    MyComputeChecksum(),
    MyDeparser()
) main;
